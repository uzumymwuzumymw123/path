class Node{constructor(t,e,x,y,i=null){this.x=t,this.y=e,this.g=x,this.h=y,this.f=x+y,this.parent=i}}function heuristic(t,e){return Math.abs(t.x-e.x)+Math.abs(t.y-e.y)}function findPath(t,e,x,y){let i=[],n=[];for(i.push(new Node(t.x,t.y,0,heuristic(t,e)));i.length>0;){i.sort(((t,e)=>t.f-e.f));let t=i.shift();if(t.x===e.x&&t.y===e.y){let e=[];for(;t;)e.push({x:t.x,y:t.y}),t=t.parent;return e.reverse()}n.push(t);let r=[{x:t.x-1,y:t.y},{x:t.x+1,y:t.y},{x:t.x,y:t.y-1},{x:t.x,y:t.y+1},{x:t.x-1,y:t.y-1},{x:t.x-1,y:t.y+1},{x:t.x+1,y:t.y-1},{x:t.x+1,y:t.y+1}];for(let h of r){if(h.x<0||h.x>=x.width||h.y<0||h.y>=x.height)continue;if(n.some((t=>t.x===h.x&&t.y===h.y)))continue;if(y.some((t=>t.x===h.x&&t.y===h.y)))continue;if(y.some((t=>t.x===e.x&&t.y===e.y)))continue;let r=t.g+1,s=heuristic(h,e),o=new Node(h.x,h.y,r,s,t),f=i.find((t=>t.x===h.x&&t.y===h.y));(!f||r<f.g)&&i.push(o)}}return[]}function expandAvoidList(t,e){let x=new Set(t.map((t=>`${t.x},${t.y}`)));return t.forEach((t=>{for(let y=-1;y<=1;y++)for(let i=-1;i<=1;i++){let n=t.x+y,r=t.y+i;n>=0&&n<e.width&&r>=0&&r<e.height&&x.add(`${n},${r}`)}})),Array.from(x).map((t=>{let[e,x]=t.split(",").map(Number);return{x:e,y:x}}))}
